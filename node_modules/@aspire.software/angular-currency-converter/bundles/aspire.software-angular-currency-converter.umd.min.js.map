{"version":3,"sources":["ng://@aspire.software/angular-currency-converter/shared/config.ts","ng://@aspire.software/angular-currency-converter/services/currency-conversion.service.ts"],"names":["apisConfigurations","host","currencyRateSource","id","label","key","value","CurrencyConversionService","prototype","getApisConfigurations","pipe","this","getCurrencyRates","url","http","get","map","data","catchError","handleError","error","throwError","convertCurrency","amount","baseCurrencyRate","baseCurrencyCode","targetCurrencyRate","targetCurrencyCode","convertedRates","targetCurrencyRates","countryCurrencyCode","baseRate","parseFloat","toFixed","rates","oneUnitConversion","parsedConversionRate","parsedOneUnitRate","push","currencyRate","convertedCountryRate","Injectable","args","providedIn","HttpClient"],"mappings":"2iBACA,IAAaA,EAAqB,CAC9BC,KAAM,kCACNC,mBAAoB,CAChB,CAAEC,GAAI,EAAIC,MAAO,SAAUC,IAAK,SAAUC,MAAO,UACjD,CAAEH,GAAI,EAAIC,MAAO,UAAWC,IAAK,UAAWC,MAAO,aCL3DC,GAgBEA,EAAAC,UAAAC,sBAAA,WACE,OAAOC,EAAAA,KAAKC,KAAKX,qBAKnBO,EAAAC,UAAAI,iBAAA,SAAiBC,GACf,OAAOF,KAAKG,KAAKC,IAAIF,GAClBH,KAAKM,EAAAA,IAAG,SAAEC,GAAmB,OAAAA,GAAMC,EAAAA,WAAWP,KAAKQ,gBAExDZ,EAAAC,UAAAW,YAAA,SAAYC,GACV,OAAOC,EAAAA,WAAWD,IAKpBb,EAAAC,UAAAc,gBAAA,SAAgBC,EAAgBC,EAA0BC,EAA0BC,EAA4BC,GAC9GhB,KAAKiB,eAAiB,OAEhBC,EAA2BH,EAC3BI,EAA2BH,EAC3BI,EAAWC,WAHcR,GAGgBS,QAAQ,GACjDC,EAAaF,WAAWH,GAAqBI,QAAQ,GAErDE,EAA8BD,EAASV,EACvCY,EAAuBJ,WAFAT,EAASW,EAASV,GAESS,QAAQ,GAC1DI,EAAoBL,WAAWG,GAAmBF,QAAQ,GAGhE,OADAtB,KAAKiB,eAAeU,KAAK,CAAEf,OAAQA,EAAQE,iBAAkBA,EAAkBD,iBAAkBO,EAAUD,oBAAqBA,EAAqBS,aAAcL,EAAOM,qBAAsBJ,EAAsBD,kBAAmBE,IAClO1B,KAAKiB,oCAxCfa,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLC,EAAAA,4IAQP,SAAArC,EAAoBO,GAAAH,KAAAG,KAAAA,EAEbH,KAAAiB,eAAsB,GACtBjB,KAAAX,mBAA0BA","sourcesContent":["/* Do not change anything here */\nexport const apisConfigurations = {\n    host: 'https://api.exchangeratesapi.io',\n    currencyRateSource: [\n        { id: 1 , label: 'Latest', key: 'latest', value: 'latest'},\n        { id: 2 , label: 'History', key: 'history', value: 'history'}\n    ]\n };","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, pipe, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { apisConfigurations } from '../shared/config';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CurrencyConversionService {\n  constructor(private http: HttpClient) { }\n  public url: string;\n  public convertedRates: any = [];  // Store converted values\n  public apisConfigurations: any = apisConfigurations;\n  /*\n  Get currency apis configurations\n  */\n  getApisConfigurations() {\n    return pipe(this.apisConfigurations);\n  }\n  /*\n  Get currency rate from specified url\n  */\n  getCurrencyRates(url: string): Observable<any> {\n    return this.http.get(url)\n      .pipe(map((data: Response) => data, catchError(this.handleError)));\n  }\n  handleError(error: HttpErrorResponse) {\n    return throwError(error);\n  }\n  /*\n  convert currencies & accept parameter of amount, baseCurrencyRate , baseCurrencyCode, targetCurrencyRate, targetCurrencyCode\n  */\n  convertCurrency(amount: number, baseCurrencyRate: number, baseCurrencyCode: string, targetCurrencyRate: number, targetCurrencyCode: string) {\n    this.convertedRates = []; // Clear array before convert currencies\n    const baseCurrencyRates: any = baseCurrencyRate; // Selected base currency rate\n    const targetCurrencyRates: any = targetCurrencyRate; // Selected target currency rate\n    const countryCurrencyCode: any = targetCurrencyCode; // Targeted currency code\n    const baseRate = parseFloat(baseCurrencyRates).toFixed(2); // // Fixed to two decimal number\n    const rates: any = parseFloat(targetCurrencyRates).toFixed(2);\n    const rateConversion: any = (amount * rates) / baseCurrencyRate; // Conversion Formula\n    const oneUnitConversion: any = (1 * rates) / baseCurrencyRate;\n    const parsedConversionRate = parseFloat(rateConversion).toFixed(2);\n    const parsedOneUnitRate = parseFloat(oneUnitConversion).toFixed(2);\n    // tslint:disable-next-line:object-literal-shorthand\n    this.convertedRates.push({ amount: amount, baseCurrencyCode: baseCurrencyCode, baseCurrencyRate: baseRate, countryCurrencyCode: countryCurrencyCode, currencyRate: rates, convertedCountryRate: parsedConversionRate, oneUnitConversion: parsedOneUnitRate });\n    return this.convertedRates;\n  }\n}"]}